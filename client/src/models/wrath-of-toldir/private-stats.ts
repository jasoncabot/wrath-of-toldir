// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PrivateStats {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):PrivateStats {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

mp():number {
  return this.bb!.readUint32(this.bb_pos);
}

maxMp():number {
  return this.bb!.readUint32(this.bb_pos + 4);
}

exp():number {
  return this.bb!.readUint32(this.bb_pos + 8);
}

maxExp():number {
  return this.bb!.readUint32(this.bb_pos + 12);
}

level():number {
  return this.bb!.readInt8(this.bb_pos + 16);
}

static sizeOf():number {
  return 20;
}

static createPrivateStats(builder:flatbuffers.Builder, mp: number, max_mp: number, exp: number, max_exp: number, level: number):flatbuffers.Offset {
  builder.prep(4, 20);
  builder.pad(3);
  builder.writeInt8(level);
  builder.writeInt32(max_exp);
  builder.writeInt32(exp);
  builder.writeInt32(max_mp);
  builder.writeInt32(mp);
  return builder.offset();
}

}
