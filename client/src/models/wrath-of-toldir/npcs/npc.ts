// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vec3 } from '../../wrath-of-toldir/vec3';


export class Npc {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Npc {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNpc(bb:flatbuffers.ByteBuffer, obj?:Npc):Npc {
  return (obj || new Npc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNpc(bb:flatbuffers.ByteBuffer, obj?:Npc):Npc {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Npc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

texture():string|null
texture(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
texture(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

pos(obj?:Vec3):Vec3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb!) : null;
}

hp():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startNpc(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addKey(builder:flatbuffers.Builder, key:number) {
  builder.addFieldInt32(0, key, 0);
}

static addTexture(builder:flatbuffers.Builder, textureOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, textureOffset, 0);
}

static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, posOffset, 0);
}

static addHp(builder:flatbuffers.Builder, hp:number) {
  builder.addFieldInt16(3, hp, 0);
}

static endNpc(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
