// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class AttackEvent {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):AttackEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAttackEvent(bb:flatbuffers.ByteBuffer, obj?:AttackEvent):AttackEvent {
  return (obj || new AttackEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAttackEvent(bb:flatbuffers.ByteBuffer, obj?:AttackEvent):AttackEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AttackEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startAttackEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addKey(builder:flatbuffers.Builder, key:number) {
  builder.addFieldInt32(0, key, 0);
}

static endAttackEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAttackEvent(builder:flatbuffers.Builder, key:number):flatbuffers.Offset {
  AttackEvent.startAttackEvent(builder);
  AttackEvent.addKey(builder, key);
  return AttackEvent.endAttackEvent(builder);
}
}
