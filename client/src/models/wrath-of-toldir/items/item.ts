// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Component, unionToComponent, unionListToComponent } from '../../wrath-of-toldir/items/component';
import { ItemTexture } from '../../wrath-of-toldir/items/item-texture';


export class Item {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):Item {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsItem(bb:flatbuffers.ByteBuffer, obj?:Item):Item {
  return (obj || new Item()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsItem(bb:flatbuffers.ByteBuffer, obj?:Item):Item {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Item()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

idLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

idArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

template():ItemTexture {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ItemTexture.Sword;
}

componentsType(index: number):Component|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

componentsTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

componentsTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

components(index: number, obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

componentsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startItem(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, idOffset, 0);
}

static createIdVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startIdVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTemplate(builder:flatbuffers.Builder, template:ItemTexture) {
  builder.addFieldInt8(1, template, ItemTexture.Sword);
}

static addComponentsType(builder:flatbuffers.Builder, componentsTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, componentsTypeOffset, 0);
}

static createComponentsTypeVector(builder:flatbuffers.Builder, data:Component[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startComponentsTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addComponents(builder:flatbuffers.Builder, componentsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, componentsOffset, 0);
}

static createComponentsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startComponentsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endItem(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createItem(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset, template:ItemTexture, componentsTypeOffset:flatbuffers.Offset, componentsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Item.startItem(builder);
  Item.addId(builder, idOffset);
  Item.addTemplate(builder, template);
  Item.addComponentsType(builder, componentsTypeOffset);
  Item.addComponents(builder, componentsOffset);
  return Item.endItem(builder);
}
}
