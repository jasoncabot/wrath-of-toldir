include "maps.fbs";
include "items.fbs";
include "entities.fbs";
include "attacks.fbs";

namespace WrathOfToldir.Events;

table MoveEvent {
    key: uint32;
    pos: Vec2;
    char_layer: Elevation;
}

table JoinEvent {
    name: string;
    entity: WrathOfToldir.Entity;
}

table LeaveEvent {
    key: uint32;
}

table AttackEvent {
    key: uint32;
    data: WrathOfToldir.Attacks.AttackData;
}

table ChatEvent {
    key: uint32;
    message: string;
}

enum DamageState : byte { Default, Dead }

table DamagedEvent {
    key: uint32;
    amount: uint16;
    hp: uint32;
    state: DamageState = Default;
}

table MapJoinedEvent {
    tilemap: WrathOfToldir.Maps.TileMap;
    npcs: [WrathOfToldir.Entity];
    character: WrathOfToldir.Character;
}

table MapChangedEvent {
    id: string;
    pos: Vec2;
    char_layer: Elevation;
}

// We give minimal information about an item when it drops (no components)
// to allow us to display it but not much more. The real information is sent
// when it's collected and then, only to the player who collects it
table ItemDropEvent {
    pos: Vec2;
    id: [uint8];
    // type of item that was dropped
    template: WrathOfToldir.Items.ItemTexture;
}

table ItemCollectedEvent {
    // public id of the player who picked the item up
    key: uint32; 
    // where the item was located
    pos: Vec2;
    // id of the item that was picked up, always sent so clients can identify and remove it correctly
    id: [uint8];
    // more details about the item that are only sent to the player who picked it up
    item: WrathOfToldir.Items.Item;
}

union Update { 
    JoinEvent,
    MoveEvent,
    LeaveEvent,
    AttackEvent,
    MapJoinedEvent,
    MapChangedEvent,
    DamagedEvent,
    ChatEvent,
    ItemDropEvent,
    ItemCollectedEvent
}

table EventLog {
    events: [Update];
}

root_type EventLog;
